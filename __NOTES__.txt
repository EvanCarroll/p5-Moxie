Perl 5 MOP
==========

Object Orientation in Perl is just a Design Pattern
---------------------------------------------------

The mechanisms of OO Perl are few and they all operate off of the 
assumption that users have followed the agreed upon patterns.

- classes are packages
- methods are subs in a package
- `our @ISA` is used to store inheritance relationship
- `bless` is used to attach a reference (instance) to 
   a package (class)
- methods are dispatched using the `->` operator

This proposal aims to add a few more items to the pattern.

- roles are just packages
- role methods are subs that are defined in a package
    - inherited methods are ignored
    - imported subs are ignored
- required (abstract) methods are just pre-declared subs
- `our @DOES` is used to store role relationships
- `our %HAS` is used to store attribute/member/slot 
  information

------------------------------------------------------------------

mop::object
-----------

The construction protocol for mop::object expects that by runtime
you have already "compiled" all the neccessary meta information into 
the package. This is because it must be able to read all meta 
information using just package stash/glob operations only. 

------------------------------------------------------------------

Questions
---------

## Do we actually want to alias required methods?

There is value in knowing that a method was not defined in a package, 
meaning that it is not owned by that package. But is there value in 
knowing this when it comes to required methods? 

Required methods will get composed in from roles, and they will be 
inherited from abstract classes, but they are mostly just markers 
that something is missing. They can't conflict since their bodies
are always the same (NULL) and when you have two of the same name
it is the same as having one. 

